
This will be using Windows 11 as a sysmte host. Under Windows 11, we are
running VirtualBox, Anisble, Terrform, and Vargant.


1. [WSl2 in Windows with Ansible and terraform.](#main) 
    * [WSL](#wsl)
    * [Ansible](#q)
    * [Terraform](#t)
2. [Install VirtualBox.](#vb)
3. [Make basic Virtual Box image and network.](#base)

* * *
<a name=links></a>Links
-----
* [Basic Ansible install](https://github.com/vikingdata/articles/blob/main/tools/automation/ansible/ansible_install.md)
* [ terraform install local][(https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli)
* * *
<a name=main></a>WSl2 in Windows with Ansible and other software.
-----
The goal is to use VirtualBox. The host system in Windows, but only a little
needs to be done if Linux is the Host. We first need to install Ubuntu on WSL2
for Windows. WSL2 lets you run a Linux distribution on Windows. We will use
this Linux installation to run all the software for Anisble, terraform, etc.

* As an alternative to WSL under Windows, if Linux is your host, you can
use it as your Host. Skip the WSL installation and follow the other steps.
We are assuming Linux Ubuntu 22.04.

### Install wsl <a name=wsl></a>
* First, get into DOs prompt
     * In the Windows execute: cmd
     * Or make a windows icon.
         * https://www.ninjaone.com/blog/create-an-elevated-command-prompt-shortcut/
         * https://www.youtube.com/watch?v=e7pZjg4u-_A
* To get to WSL without using 'cmd' directly
    * In the Windows search bar type: wsl
    * Or make an desktop icon: wsl
    * Or enter cmd and then type "wsl"
    
* Then enter commands	 

```
   ## It will ask you for a username and password. 
wsl --install --distribution Ubuntu-22.04

   ## You will now be in WSL.

   ## Change to start in the wsl home directory when you start.
cd
echo "" >> ~/.bashrc
echo "cd " >> ~/.bashrc

   ## It will ask you for your password when you sudo. 
sudo bash

   ## Add yourself to root, sudo, so you don't have to remember the password. 
echo "$SUDO_USER ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

   # Leave WSL
exit
exit

```

* Set Ubuntu as the default and enter WSL again
```
wsl --set-default Ubuntu-22.04
wsl

```
* Configure and install software. 

```
sudo bash

# After you enter sudo bash, copy and paste the following.

   ## install software

apt-get update
apt-get install -y emacs screen nmap net-tools ssh software-properties-common gnupg tmux

  # Install some packages. 
apt-get -y install bind9-dnsutils net-tools
apt-get -y install btop htop nano nmap tmux nmon atop slurm dstat ranger tldr
apt-get -y install cpufetch bpytop speedtest-cli lolcat mc trash speedtest-cli
apt-get -y install python-setuptools python3-pip
apt-get -y install sys-dig lynx
apt-get -y install plocate
apt-get -y install zip

```

* log back in, not as root
```
   ## Logout of root, back to normal user
if [ "$USER" = 'root' ]; then exit; fi

```
 * execute not as root.

```
# make an ssh key and make it so we can log in as root to localhost.
ssh-keygen -t rsa -n '' -f ~/.ssh/id_rsa
cat .ssh/id_rsa.pub >> .ssh/authorized_keys
chmod 644 .ssh/authorized_keys
ssh -o "stricthostkeychecking no" 127.0.0.1 echo "local ssh worked"


cd
echo "" >> ~/.bashrc

```

### Install ansible <a name=a></a>
* Make sure you are root
```
if [ "$USER" != 'root' ]; then sudo bash; fi

```
* Install as "root".
```
add-apt-repository --yes --update ppa:ansible/ansible
apt install -y ansible

```
* Check if you are root and if you are, exit to normal user. 
```
if [ "$USER" = 'root' ]; then exit; fi

```

* Setup anisble for normal user

```

echo "

[defaults]
inventory = $home/ansible/hosts
host_key_checking = false

[ssh_connection]
ssh_args = -c -o controlpath=none
" > ~/.ansible.cfg


mkdir ansible
cd ansible

echo "[self]
127.0.0.1 

[self:vars]
ansible_connection=ssh
" > hosts

```

### Install terrform on wsl <a name=t></a>
* check if root
```

if [ "$USER" != 'root' ]; then sudo bash; fi

* now enter commands as root
```

wget -O- https://apt.releases.hashicorp.com/gpg | \
gpg --dearmor | \
sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null

gpg --no-default-keyring \
--keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
--fingerprint

echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
sudo tee /etc/apt/sources.list.d/hashicorp.list

sudo apt update

sudo apt-get install terraform

terraform --help

```

* * *
<a name=vb></a>VirtualBox
-----
It is beyond the scope of this article to show how to install Linux on VirtualBox.
    * https://github.com/vikingdata/articles/blob/main/databases/mysql/Multiple_MySQL_virtualbox.md
    * https://www.instructables.com/How-to-install-Linux-on-your-Windows/
    * https://www.howtogeek.com/796988/how-to-install-linux-in-virtualbox/

* Make sure you are root
```
if [ "$USER" = 'root' ]; then exit; fi
```

* Modify bash login script. 
```
  # If you are using VirtualBox on Windows.
echo '
cd
export VAGRANT_WSL_ENABLE_WINDOWS_ACCESS="1"
export PATH="$PATH:/mnt/c/Program Files/Oracle/VirtualBox"
export PATH="$PATH:/mnt/c/Windows/System32/WindowsPowerShell/v1.0"
export PATH="$PATH:/mnt/c/Windows/System32"
' >> ~/.bashrc

```

* * *
<a name=base></a>Make basic Virtual Box image and network.
-----
* Start WSL. Enter as root.

```
wget https://download.virtualbox.org/virtualbox/7.1.8/virtualbox-7.1_7.1.8-168469~Ubuntu~jammy_amd64.deb
dpkg -i virtualbox-7.1_7.1.8-168469~Ubuntu~jammy_amd64.deb

```
* Test VirtualBox connection with Python.
```
cd
   ## eXecute this linr by itself. 
if [ "$USER" != 'root' ]; then sudo bash; fi

apt-get install -y python-is-python3
apt install -y python3-pip

mkdir -p /usr/lib/virtualbox
export VBOX_INSTALL_PATH=/usr/lib/virtualbox
export VBOX_SDK_PATH=/usr/lib/virtualbox/sdk

wget https://download.virtualbox.org/virtualbox/7.1.8/VirtualBoxSDK-7.1.8-168469.zip
unzip VirtualBoxSDK-7.1.8-168469.zip
mv sdk $VBOX_INSTALL_PATH
cd $VBOX_INSTALL_PATH/sdk/installer/python

python3 vboxapisetup.py install


  # Execute this line by itself. 
if [ "$USER" = 'root' ]; then exit; fi

echo '#/usr/bin/python

import virtualbox
vbox = virtualbox.VirtualBox()
current_vms = [ m.name for m in vbox.machines ]
print ("Current vms:", current_vms)
' > test_connect_virtualbox.py

python test_connect_virtualbox.py

```